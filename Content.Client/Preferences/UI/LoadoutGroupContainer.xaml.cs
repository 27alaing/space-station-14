using Content.Shared.Clothing;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Preferences.Loadouts.Effects;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Player;
using Robust.Shared.Prototypes;

namespace Content.Client.Preferences.UI;

[GenerateTypedNameReferences]
public sealed partial class LoadoutGroupContainer : BoxContainer
{
    private readonly LoadoutGroupPrototype _groupProto;

    public event Action<ProtoId<LoadoutPrototype>?>? OnLoadoutPressed;

    public LoadoutGroupContainer(RoleLoadout loadout, LoadoutGroupPrototype groupProto, ICommonSession session, IDependencyCollection collection)
    {
        RobustXamlLoader.Load(this);
        _groupProto = groupProto;

        RefreshLoadouts(loadout, session, collection);
    }

    /// <summary>
    /// Updates button availabilities and buttons.
    /// </summary>
    public void RefreshLoadouts(RoleLoadout loadout, ICommonSession session, IDependencyCollection collection)
    {
        LoadoutsContainer.DisposeAllChildren();
        var btnGroup = new ButtonGroup(false);
        // Didn't use options because this is more robust in future.
        var protoMan = collection.Resolve<IPrototypeManager>();
        var loadoutSystem = collection.Resolve<IEntityManager>().System<LoadoutSystem>();

        var selected = loadout.SelectedLoadouts[_groupProto.ID];

        if (_groupProto.Optional)
        {
            var loadoutContainer = new LoadoutContainer(null, btnGroup, false, null);
            loadoutContainer.Text = Loc.GetString("loadout-none");

            if (selected == null)
            {
                loadoutContainer.Pressed = true;
            }

            loadoutContainer.OnLoadoutPressed += args =>
            {
                OnLoadoutPressed?.Invoke(null);
            };
            LoadoutsContainer.AddChild(loadoutContainer);
        }

        foreach (var role in _groupProto.Loadouts)
        {
            if (!protoMan.TryIndex(role, out var loadProto))
                continue;

            var enabled = loadout.IsValid(session, role, collection, out var reason);
            var loadoutContainer = new LoadoutContainer(role, btnGroup, !enabled, reason);

            // If there's no selection in the loadout or
            if (selected?.Id == role.Id)
            {
                loadoutContainer.Pressed = true;
            }

            loadoutContainer.Text = loadoutSystem.GetName(loadProto);

            loadoutContainer.OnLoadoutPressed += args =>
            {
                OnLoadoutPressed?.Invoke(args);
            };
            LoadoutsContainer.AddChild(loadoutContainer);
        }
    }
}
