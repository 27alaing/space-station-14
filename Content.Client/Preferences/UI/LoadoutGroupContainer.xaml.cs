using Content.Shared.Preferences.Loadouts;
using Content.Shared.Preferences.Loadouts.Effects;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.Preferences.UI;

[GenerateTypedNameReferences]
public sealed partial class LoadoutGroupContainer : BoxContainer
{
    private LoadoutGroupPrototype _groupProto;

    public event Action<ProtoId<LoadoutPrototype>?>? OnLoadoutPressed;

    public LoadoutGroupContainer(RoleLoadout loadout, LoadoutGroupPrototype groupProto)
    {
        RobustXamlLoader.Load(this);
        _groupProto = groupProto;

        RefreshLoadouts(loadout);
    }

    public void RefreshLoadouts(RoleLoadout loadout)
    {
        GroupName.Text = _groupProto.ID;
        LoadoutsContainer.DisposeAllChildren();
        var btnGroup = new ButtonGroup(false);
        // Didn't use options because this is more robust in future.

        var selected = loadout.SelectedLoadouts[_groupProto.ID];

        if (_groupProto.Optional)
        {
            var btn = new Button()
            {
                Text = Loc.GetString("loadout-none"),
                ToggleMode = true,
                Group = btnGroup,
            };

            if (selected == null)
            {
                btn.Pressed = true;
            }

            btn.OnPressed += args =>
            {
                OnLoadoutPressed?.Invoke(null);
            };
            LoadoutsContainer.AddChild(btn);
        }

        foreach (var role in _groupProto.Loadouts)
        {
            var btn = new Button()
            {
                Text = role.Id,
                Disabled = false,
                ToggleMode = true,
                Group = btnGroup,
            };

            // If there's no selection in the loadout or
            if (selected?.Id == role.Id)
            {
                btn.Pressed = true;
            }

            btn.OnPressed += args =>
            {
                OnLoadoutPressed?.Invoke(role);
            };
            LoadoutsContainer.AddChild(btn);
        }
    }
}
